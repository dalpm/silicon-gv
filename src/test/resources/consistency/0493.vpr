// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/257/)

field val: Int

predicate one(a: Ref) {
  acc(a.val)
}

predicate two(a: Ref, i: Int) {
  acc(a.val) && a.val == i
}

define access_val(as) forall a: Ref :: { a.val } a in as ==> acc(a.val)
define access_one(as) forall a: Ref :: { one(a) } a in as ==> one(a)
define access_two(as, is) forall a: Ref, i: Int :: { two(a, i) } a in as && i in  is ==> two(a, i)

function foo_val(as: Set[Ref]): Int
    requires access_val(as)

function foo_one(as: Set[Ref]): Int
    requires access_one(as)

function foo_two(as: Set[Ref], is: Set[Int]): Int
    requires access_two(as, is)

method test_val(as: Set[Ref]) {
    inhale access_val(as)
    inhale foo_val(as) == 0
    exhale foo_val(as) == 0
}

method test_one(as: Set[Ref]) {
    inhale access_one(as)
    inhale foo_one(as) == 0
    exhale foo_one(as) == 0
}

method test_two(as: Set[Ref], is: Set[Int]) {
    inhale access_two(as, is)
    inhale foo_two(as, is) == 0
    exhale foo_two(as, is) == 0
}
